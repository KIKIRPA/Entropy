<?php

  // prevent direct access to this file (thus only when included)
  if (count(get_included_files()) == 1) 
  {
    header($_SERVER["SERVER_PROTOCOL"]." 404 Not Found");
    header("Status: 404 Not Found");
    exit("Direct access not permitted.");
  }

  
/* *************************************************************************************************************************
    COOKIE-TOOLS
      verifycookie($name[, $institution, $email])
            read and verify the cookie contents; 
            IN: takes either a single string ("Wim||KIK||w@k.be") or three strings ("Wim", "KIK", "w@k.be")
            OUT: returns cookie array (if correct), returns False if incorrect data 
      makecookie($cookiearray[, $cpath])   
            make or update (newer expire time!) the cookie and log it
            IN: cookiearray (as generated by verifycookie) and optionally the cookie path (default ./)
      removecookie()       
            remove the cookie
            IN: optionally the cookie path (default ./)
      encode($string,$key)
      decode($string,$key)
   ************************************************************************************************************************* */

  //require_once('./inc/common_xml.inc.php');              //error handling! --> now in common_basic

   
  function verifycookie($name, $institution = NULL, $email = NULL)
  {
    //global $cryptkey;
    
    // TODO: if false data is supplied: log to errorlog!! 
    if (($institution == NULL) and ($email == NULL))
    {
      $cookiearray = explode("||", decode($name, CRYPT_KEY));
      if (count($cookiearray) != 3) 
        return eventLog("WARNING", "cookie could not be decrypted: ".decode($name, CRYPT_KEY)." [tools_cookie.verifycookie]", false);
      
      // giving the array proper indices
      $cookiearray = array (
        'name'        => $cookiearray[0],
        'institution' => $cookiearray[1],
        'email'       => $cookiearray[2]
      );
    }
    else
      $cookiearray = array ( 'name'        => $name,
                             'institution' => $institution,
                             'email'       => $email );
    
    // check if name and institution are not empty
    if (($cookiearray['name'] == '') or ($cookiearray['institution'] == ''))
      return eventLog("WARNING", "cookie data is incomplete [tools_cookie.verifycookie]", false); 
      
    // check email and fiels; security for scripts?
    if (!filter_var($cookiearray['email'], FILTER_VALIDATE_EMAIL))
      return eventLog("WARNING", "cookie: invalid email [tools_cookie.verifycookie]", false); 
      
    return $cookiearray;
  }
  
  
  function makecookie($cookiearray, $cpath = './')
  {
    // NOTE: we expect the cookiearray to be in the correct array-format and verified (using readcookie())
    
    //global $cryptkey, $cname, $cexpire;
    $cvalue =  encode(implode("||", $cookiearray), CRYPT_KEY);   
    
    setcookie(COOKIE_NAME, $cvalue, time() + COOKIE_EXPIRE, $cpath);
    return True;
  }
  
   
  function removecookie($cpath = './')
  {
    //global $cname;
    
    unset($_COOKIE[COOKIE_NAME]);
    setcookie(COOKIE_NAME, '', time() - 3600, $cpath); // empty value and expire time at a past time
  }
  
  
  function encode($string,$key)
  {
    $j = 0;
    $hash = "";
    $key = sha1($key);
    $strLen = strlen($string);
    $keyLen = strlen($key);
  
    for ($i = 0; $i < $strLen; $i++)
    {
      $ordStr = ord(substr($string,$i,1));
      if ($j == $keyLen) $j = 0;
      $ordKey = ord(substr($key,$j,1));
      $j++;
      $hash .= strrev(base_convert(dechex($ordStr + $ordKey),16,36));
    }
    return $hash;
  }

  
  function decode($string,$key)
  {
    $j = 0;
    $hash = "";
    $key = sha1($key);
    $strLen = strlen($string);
    $keyLen = strlen($key);
    for ($i = 0; $i < $strLen; $i+=2)
    {
      $ordStr = hexdec(base_convert(strrev(substr($string,$i,2)),36,16));
      if ($j == $keyLen) $j = 0;
      $ordKey = ord(substr($key,$j,1));
      $j++;
      $hash .= chr($ordStr - $ordKey);
    }
    return $hash;
  }
    
?>
